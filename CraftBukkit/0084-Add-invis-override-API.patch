From 8e64f7ebe64aed395570b3e883f7230133200165 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 14 Feb 2015 08:18:51 -0500
Subject: [PATCH] Add invis override API


diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
index 6433ef7..d48d5c9 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -4,8 +4,10 @@ import java.util.List;
 
 public class PacketPlayOutEntityMetadata implements Packet {
 
-    private int a;
-    private List b;
+    // SportBukkit start - make public
+    public int a;
+    public List b;
+    // SportBukkit end
 
     public PacketPlayOutEntityMetadata() {}
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 10ab97c..0ac7164 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -968,6 +968,26 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
             }
 
+        } else if(packet instanceof PacketPlayOutEntityMetadata) {
+            // Override invisibility flag for players with canSeeInvisibles -> true
+            if(this.getPlayer().canSeeInvisibles()) {
+                PacketPlayOutEntityMetadata metadataPacket = (PacketPlayOutEntityMetadata) packet;
+                for(int i = 0; i < metadataPacket.b.size(); i++) {
+                    WatchableObject wo = (WatchableObject) metadataPacket.b.get(i);
+                    if(wo.a() == 0 && wo.b() instanceof Byte) { // Flags at metadata index 0
+                        byte entityFlags = (Byte) wo.b();
+                        if((entityFlags & 0x20) != 0) { // Invisible flag
+                            PacketPlayOutEntityMetadata replacementPacket = new PacketPlayOutEntityMetadata();
+                            replacementPacket.a = metadataPacket.a;
+                            replacementPacket.b = new ArrayList(metadataPacket.b);
+                            replacementPacket.b.set(i, new WatchableObject(wo.c(), wo.a(), (byte) (entityFlags & ~0x20))); // Clear invisibility
+
+                            packet = replacementPacket;
+                        }
+                        break;
+                    }
+                }
+            }
         }
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 75da87a..35f5543 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -82,6 +82,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean scaledHealth = false;
     private double healthScale = 20;
     private Skin realSkin;
+    private boolean showInvisibles;
 
     private final Map<CommandSender, String> fakeNames = new WeakHashMap<CommandSender, String>();
     private final Map<CommandSender, String> fakeDisplayNames = new WeakHashMap<CommandSender, String>();
@@ -1239,6 +1240,24 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
+    public boolean canSeeInvisibles() {
+        return this.showInvisibles;
+    }
+
+    @Override
+    public void showInvisibles(boolean show) {
+        if(show != this.showInvisibles) {
+            this.showInvisibles = show;
+            EntityTracker tracker = ((WorldServer) this.entity.world).tracker;
+            for(Entity entity : ((List<Entity>) getHandle().world.entityList)) {
+                if(entity.isInvisible() && ((EntityTrackerEntry) tracker.trackedEntities.get(entity.getId())).trackedPlayers.contains(getHandle())) {
+                    getHandle().playerConnection.sendPacket(new PacketPlayOutEntityMetadata(entity.getId(), entity.getDataWatcher(), true));
+                }
+            }
+        }
+    }
+
+    @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
-- 
1.9.0

