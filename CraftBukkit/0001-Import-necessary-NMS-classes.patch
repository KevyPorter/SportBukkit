From a3f5ee54d9de78919eeb100db2b63d65dbf0b8ec Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 8 Feb 2015 19:04:27 -0500
Subject: [PATCH] Import necessary NMS classes


diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
new file mode 100644
index 0000000..70ad81c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockFalling extends Block {
+
+    public static boolean instaFall;
+
+    public BlockFalling() {
+        super(Material.SAND);
+        this.a(CreativeModeTab.b);
+    }
+
+    public BlockFalling(Material material) {
+        super(material);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
+        if (!world.isStatic) {
+            this.e(world, blockposition);
+        }
+
+    }
+
+    private void e(World world, BlockPosition blockposition) {
+        if (canFall(world, blockposition.down()) && blockposition.getY() >= 0) {
+            byte b0 = 32;
+
+            if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-b0, -b0, -b0), blockposition.a(b0, b0, b0))) {
+                if (!world.isStatic) {
+                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
+
+                    this.a(entityfallingblock);
+                    world.addEntity(entityfallingblock);
+                }
+            } else {
+                world.setAir(blockposition);
+
+                BlockPosition blockposition1;
+
+                for (blockposition1 = blockposition.down(); canFall(world, blockposition1) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
+                    ;
+                }
+
+                if (blockposition1.getY() > 0) {
+                    world.setTypeUpdate(blockposition1.up(), this.getBlockData());
+                }
+            }
+
+        }
+    }
+
+    protected void a(EntityFallingBlock entityfallingblock) {}
+
+    public int a(World world) {
+        return 2;
+    }
+
+    public static boolean canFall(World world, BlockPosition blockposition) {
+        Block block = world.getType(blockposition).getBlock();
+        Material material = block.material;
+
+        return block == Blocks.FIRE || material == Material.AIR || material == Material.WATER || material == Material.LAVA;
+    }
+
+    public void a_(World world, BlockPosition blockposition) {}
+}
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
new file mode 100644
index 0000000..602d927
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -0,0 +1,212 @@
+package net.minecraft.server;
+
+import java.util.Iterator;
+import java.util.Random;
+
+public abstract class BlockFluids extends Block {
+
+    public static final BlockStateInteger LEVEL = BlockStateInteger.of("level", 0, 15);
+
+    protected BlockFluids(Material material) {
+        super(material);
+        this.j(this.blockStateList.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(0)));
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        this.a(true);
+    }
+
+    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return this.material != Material.LAVA;
+    }
+
+    public static float b(int i) {
+        if (i >= 8) {
+            i = 0;
+        }
+
+        return (float) (i + 1) / 9.0F;
+    }
+
+    protected int e(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return iblockaccess.getType(blockposition).getBlock().getMaterial() == this.material ? ((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() : -1;
+    }
+
+    protected int f(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        int i = this.e(iblockaccess, blockposition);
+
+        return i >= 8 ? 0 : i;
+    }
+
+    public boolean d() {
+        return false;
+    }
+
+    public boolean c() {
+        return false;
+    }
+
+    public boolean a(IBlockData iblockdata, boolean flag) {
+        return flag && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0;
+    }
+
+    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
+        Material material = iblockaccess.getType(blockposition).getBlock().getMaterial();
+
+        return material == this.material ? false : (enumdirection == EnumDirection.UP ? true : (material == Material.ICE ? false : super.b(iblockaccess, blockposition, enumdirection)));
+    }
+
+    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        return null;
+    }
+
+    public int b() {
+        return 1;
+    }
+
+    public Item getDropType(IBlockData iblockdata, Random random, int i) {
+        return null;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    protected Vec3D h(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        Vec3D vec3d = new Vec3D(0.0D, 0.0D, 0.0D);
+        int i = this.f(iblockaccess, blockposition);
+        Iterator iterator = EnumDirectionLimit.HORIZONTAL.iterator();
+
+        EnumDirection enumdirection;
+        BlockPosition blockposition1;
+
+        while (iterator.hasNext()) {
+            enumdirection = (EnumDirection) iterator.next();
+            blockposition1 = blockposition.shift(enumdirection);
+            int j = this.f(iblockaccess, blockposition1);
+            int k;
+
+            if (j < 0) {
+                if (!iblockaccess.getType(blockposition1).getBlock().getMaterial().isSolid()) {
+                    j = this.f(iblockaccess, blockposition1.down());
+                    if (j >= 0) {
+                        k = j - (i - 8);
+                        vec3d = vec3d.add((double) ((blockposition1.getX() - blockposition.getX()) * k), (double) ((blockposition1.getY() - blockposition.getY()) * k), (double) ((blockposition1.getZ() - blockposition.getZ()) * k));
+                    }
+                }
+            } else if (j >= 0) {
+                k = j - i;
+                vec3d = vec3d.add((double) ((blockposition1.getX() - blockposition.getX()) * k), (double) ((blockposition1.getY() - blockposition.getY()) * k), (double) ((blockposition1.getZ() - blockposition.getZ()) * k));
+            }
+        }
+
+        if (((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() >= 8) {
+            iterator = EnumDirectionLimit.HORIZONTAL.iterator();
+
+            while (iterator.hasNext()) {
+                enumdirection = (EnumDirection) iterator.next();
+                blockposition1 = blockposition.shift(enumdirection);
+                if (this.b(iblockaccess, blockposition1, enumdirection) || this.b(iblockaccess, blockposition1.up(), enumdirection)) {
+                    vec3d = vec3d.a().add(0.0D, -6.0D, 0.0D);
+                    break;
+                }
+            }
+        }
+
+        return vec3d.a();
+    }
+
+    public Vec3D a(World world, BlockPosition blockposition, Entity entity, Vec3D vec3d) {
+        return vec3d.e(this.h(world, blockposition));
+    }
+
+    public int a(World world) {
+        return this.material == Material.WATER ? 5 : (this.material == Material.LAVA ? (world.worldProvider.o() ? 10 : 30) : 0);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        this.e(world, blockposition, iblockdata);
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        this.e(world, blockposition, iblockdata);
+    }
+
+    public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        if (this.material == Material.LAVA) {
+            boolean flag = false;
+            EnumDirection[] aenumdirection = EnumDirection.values();
+            int i = aenumdirection.length;
+
+            for (int j = 0; j < i; ++j) {
+                EnumDirection enumdirection = aenumdirection[j];
+
+                if (enumdirection != EnumDirection.DOWN && world.getType(blockposition.shift(enumdirection)).getBlock().getMaterial() == Material.WATER) {
+                    flag = true;
+                    break;
+                }
+            }
+
+            if (flag) {
+                Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
+
+                if (integer.intValue() == 0) {
+                    world.setTypeUpdate(blockposition, Blocks.OBSIDIAN.getBlockData());
+                    this.fizz(world, blockposition);
+                    return true;
+                }
+
+                if (integer.intValue() <= 4) {
+                    world.setTypeUpdate(blockposition, Blocks.COBBLESTONE.getBlockData());
+                    this.fizz(world, blockposition);
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    protected void fizz(World world, BlockPosition blockposition) {
+        double d0 = (double) blockposition.getX();
+        double d1 = (double) blockposition.getY();
+        double d2 = (double) blockposition.getZ();
+
+        world.makeSound(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, "random.fizz", 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+
+        for (int i = 0; i < 8; ++i) {
+            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+        }
+
+    }
+
+    public IBlockData fromLegacyData(int i) {
+        return this.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(i));
+    }
+
+    public int toLegacyData(IBlockData iblockdata) {
+        return ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
+    }
+
+    protected BlockStateList getStateList() {
+        return new BlockStateList(this, new IBlockState[] { BlockFluids.LEVEL});
+    }
+
+    public static BlockFlowing a(Material material) {
+        if (material == Material.WATER) {
+            return Blocks.FLOWING_WATER;
+        } else if (material == Material.LAVA) {
+            return Blocks.FLOWING_LAVA;
+        } else {
+            throw new IllegalArgumentException("Invalid material");
+        }
+    }
+
+    public static BlockStationary b(Material material) {
+        if (material == Material.WATER) {
+            return Blocks.WATER;
+        } else if (material == Material.LAVA) {
+            return Blocks.LAVA;
+        } else {
+            throw new IllegalArgumentException("Invalid material");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
new file mode 100644
index 0000000..622f0e6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -0,0 +1,102 @@
+package net.minecraft.server;
+
+public class BlockTNT extends Block {
+
+    public static final BlockStateBoolean EXPLODE = BlockStateBoolean.of("explode");
+
+    public BlockTNT() {
+        super(Material.TNT);
+        this.j(this.blockStateList.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf(false)));
+        this.a(CreativeModeTab.d);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        super.onPlace(world, blockposition, iblockdata);
+        if (world.isBlockIndirectlyPowered(blockposition)) {
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            world.setAir(blockposition);
+        }
+
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        if (world.isBlockIndirectlyPowered(blockposition)) {
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            world.setAir(blockposition);
+        }
+
+    }
+
+    public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {
+        if (!world.isStatic) {
+            EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.5F), (double) ((float) blockposition.getZ() + 0.5F), explosion.c());
+
+            entitytntprimed.fuseTicks = world.random.nextInt(entitytntprimed.fuseTicks / 4) + entitytntprimed.fuseTicks / 8;
+            world.addEntity(entitytntprimed);
+        }
+    }
+
+    public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        this.a(world, blockposition, iblockdata, (EntityLiving) null);
+    }
+
+    public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
+        if (!world.isStatic) {
+            if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.5F), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
+
+                world.addEntity(entitytntprimed);
+                world.makeSound(entitytntprimed, "game.tnt.primed", 1.0F, 1.0F);
+            }
+
+        }
+    }
+
+    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (entityhuman.bY() != null) {
+            Item item = entityhuman.bY().getItem();
+
+            if (item == Items.FLINT_AND_STEEL || item == Items.FIRE_CHARGE) {
+                this.a(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)), (EntityLiving) entityhuman);
+                world.setAir(blockposition);
+                if (item == Items.FLINT_AND_STEEL) {
+                    entityhuman.bY().damage(1, entityhuman);
+                } else if (!entityhuman.abilities.canInstantlyBuild) {
+                    --entityhuman.bY().count;
+                }
+
+                return true;
+            }
+        }
+
+        return super.interact(world, blockposition, iblockdata, entityhuman, enumdirection, f, f1, f2);
+    }
+
+    public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
+        if (!world.isStatic && entity instanceof EntityArrow) {
+            EntityArrow entityarrow = (EntityArrow) entity;
+
+            if (entityarrow.isBurning()) {
+                this.a(world, blockposition, world.getType(blockposition).set(BlockTNT.EXPLODE, Boolean.valueOf(true)), entityarrow.shooter instanceof EntityLiving ? (EntityLiving) entityarrow.shooter : null);
+                world.setAir(blockposition);
+            }
+        }
+
+    }
+
+    public boolean a(Explosion explosion) {
+        return false;
+    }
+
+    public IBlockData fromLegacyData(int i) {
+        return this.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf((i & 1) > 0));
+    }
+
+    public int toLegacyData(IBlockData iblockdata) {
+        return ((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue() ? 1 : 0;
+    }
+
+    protected BlockStateList getStateList() {
+        return new BlockStateList(this, new IBlockState[] { BlockTNT.EXPLODE});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
new file mode 100644
index 0000000..e21e68d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -0,0 +1,321 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import org.apache.commons.lang3.ObjectUtils;
+
+public class DataWatcher {
+
+    private final Entity a;
+    private boolean b = true;
+    private static final Map c = Maps.newHashMap();
+    private final Map d = Maps.newHashMap();
+    private boolean e;
+    private ReadWriteLock f = new ReentrantReadWriteLock();
+
+    public DataWatcher(Entity entity) {
+        this.a = entity;
+    }
+
+    public void a(int i, Object object) {
+        Integer integer = (Integer) DataWatcher.c.get(object.getClass());
+
+        if (integer == null) {
+            throw new IllegalArgumentException("Unknown data type: " + object.getClass());
+        } else if (i > 31) {
+            throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 31 + ")");
+        } else if (this.d.containsKey(Integer.valueOf(i))) {
+            throw new IllegalArgumentException("Duplicate id value for " + i + "!");
+        } else {
+            WatchableObject watchableobject = new WatchableObject(integer.intValue(), i, object);
+
+            this.f.writeLock().lock();
+            this.d.put(Integer.valueOf(i), watchableobject);
+            this.f.writeLock().unlock();
+            this.b = false;
+        }
+    }
+
+    public void add(int i, int j) {
+        WatchableObject watchableobject = new WatchableObject(j, i, (Object) null);
+
+        this.f.writeLock().lock();
+        this.d.put(Integer.valueOf(i), watchableobject);
+        this.f.writeLock().unlock();
+        this.b = false;
+    }
+
+    public byte getByte(int i) {
+        return ((Byte) this.j(i).b()).byteValue();
+    }
+
+    public short getShort(int i) {
+        return ((Short) this.j(i).b()).shortValue();
+    }
+
+    public int getInt(int i) {
+        return ((Integer) this.j(i).b()).intValue();
+    }
+
+    public float getFloat(int i) {
+        return ((Float) this.j(i).b()).floatValue();
+    }
+
+    public String getString(int i) {
+        return (String) this.j(i).b();
+    }
+
+    public ItemStack getItemStack(int i) {
+        return (ItemStack) this.j(i).b();
+    }
+
+    private WatchableObject j(int i) {
+        this.f.readLock().lock();
+
+        WatchableObject watchableobject;
+
+        try {
+            watchableobject = (WatchableObject) this.d.get(Integer.valueOf(i));
+        } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
+            CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
+
+            crashreportsystemdetails.a("Data ID", (Object) Integer.valueOf(i));
+            throw new ReportedException(crashreport);
+        }
+
+        this.f.readLock().unlock();
+        return watchableobject;
+    }
+
+    public Vector3f h(int i) {
+        return (Vector3f) this.j(i).b();
+    }
+
+    public void watch(int i, Object object) {
+        WatchableObject watchableobject = this.j(i);
+
+        if (ObjectUtils.notEqual(object, watchableobject.b())) {
+            watchableobject.a(object);
+            this.a.i(i);
+            watchableobject.a(true);
+            this.e = true;
+        }
+
+    }
+
+    public void update(int i) {
+        WatchableObject.a(this.j(i), true);
+        this.e = true;
+    }
+
+    public boolean a() {
+        return this.e;
+    }
+
+    public static void a(List list, PacketDataSerializer packetdataserializer) {
+        if (list != null) {
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+                a(packetdataserializer, watchableobject);
+            }
+        }
+
+        packetdataserializer.writeByte(127);
+    }
+
+    public List b() {
+        ArrayList arraylist = null;
+
+        if (this.e) {
+            this.f.readLock().lock();
+            Iterator iterator = this.d.values().iterator();
+
+            while (iterator.hasNext()) {
+                WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+                if (watchableobject.d()) {
+                    watchableobject.a(false);
+                    if (arraylist == null) {
+                        arraylist = Lists.newArrayList();
+                    }
+
+                    arraylist.add(watchableobject);
+                }
+            }
+
+            this.f.readLock().unlock();
+        }
+
+        this.e = false;
+        return arraylist;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.f.readLock().lock();
+        Iterator iterator = this.d.values().iterator();
+
+        while (iterator.hasNext()) {
+            WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+            a(packetdataserializer, watchableobject);
+        }
+
+        this.f.readLock().unlock();
+        packetdataserializer.writeByte(127);
+    }
+
+    public List c() {
+        ArrayList arraylist = null;
+
+        this.f.readLock().lock();
+
+        WatchableObject watchableobject;
+
+        for (Iterator iterator = this.d.values().iterator(); iterator.hasNext(); arraylist.add(watchableobject)) {
+            watchableobject = (WatchableObject) iterator.next();
+            if (arraylist == null) {
+                arraylist = Lists.newArrayList();
+            }
+        }
+
+        this.f.readLock().unlock();
+        return arraylist;
+    }
+
+    private static void a(PacketDataSerializer packetdataserializer, WatchableObject watchableobject) {
+        int i = (watchableobject.c() << 5 | watchableobject.a() & 31) & 255;
+
+        packetdataserializer.writeByte(i);
+        switch (watchableobject.c()) {
+        case 0:
+            packetdataserializer.writeByte(((Byte) watchableobject.b()).byteValue());
+            break;
+
+        case 1:
+            packetdataserializer.writeShort(((Short) watchableobject.b()).shortValue());
+            break;
+
+        case 2:
+            packetdataserializer.writeInt(((Integer) watchableobject.b()).intValue());
+            break;
+
+        case 3:
+            packetdataserializer.writeFloat(((Float) watchableobject.b()).floatValue());
+            break;
+
+        case 4:
+            packetdataserializer.a((String) watchableobject.b());
+            break;
+
+        case 5:
+            ItemStack itemstack = (ItemStack) watchableobject.b();
+
+            packetdataserializer.a(itemstack);
+            break;
+
+        case 6:
+            BlockPosition blockposition = (BlockPosition) watchableobject.b();
+
+            packetdataserializer.writeInt(blockposition.getX());
+            packetdataserializer.writeInt(blockposition.getY());
+            packetdataserializer.writeInt(blockposition.getZ());
+            break;
+
+        case 7:
+            Vector3f vector3f = (Vector3f) watchableobject.b();
+
+            packetdataserializer.writeFloat(vector3f.getX());
+            packetdataserializer.writeFloat(vector3f.getY());
+            packetdataserializer.writeFloat(vector3f.getZ());
+        }
+
+    }
+
+    public static List b(PacketDataSerializer packetdataserializer) {
+        ArrayList arraylist = null;
+
+        for (byte b0 = packetdataserializer.readByte(); b0 != 127; b0 = packetdataserializer.readByte()) {
+            if (arraylist == null) {
+                arraylist = Lists.newArrayList();
+            }
+
+            int i = (b0 & 224) >> 5;
+            int j = b0 & 31;
+            WatchableObject watchableobject = null;
+
+            switch (i) {
+            case 0:
+                watchableobject = new WatchableObject(i, j, Byte.valueOf(packetdataserializer.readByte()));
+                break;
+
+            case 1:
+                watchableobject = new WatchableObject(i, j, Short.valueOf(packetdataserializer.readShort()));
+                break;
+
+            case 2:
+                watchableobject = new WatchableObject(i, j, Integer.valueOf(packetdataserializer.readInt()));
+                break;
+
+            case 3:
+                watchableobject = new WatchableObject(i, j, Float.valueOf(packetdataserializer.readFloat()));
+                break;
+
+            case 4:
+                watchableobject = new WatchableObject(i, j, packetdataserializer.c(32767));
+                break;
+
+            case 5:
+                watchableobject = new WatchableObject(i, j, packetdataserializer.i());
+                break;
+
+            case 6:
+                int k = packetdataserializer.readInt();
+                int l = packetdataserializer.readInt();
+                int i1 = packetdataserializer.readInt();
+
+                watchableobject = new WatchableObject(i, j, new BlockPosition(k, l, i1));
+                break;
+
+            case 7:
+                float f = packetdataserializer.readFloat();
+                float f1 = packetdataserializer.readFloat();
+                float f2 = packetdataserializer.readFloat();
+
+                watchableobject = new WatchableObject(i, j, new Vector3f(f, f1, f2));
+            }
+
+            arraylist.add(watchableobject);
+        }
+
+        return arraylist;
+    }
+
+    public boolean d() {
+        return this.b;
+    }
+
+    public void e() {
+        this.e = false;
+    }
+
+    static {
+        DataWatcher.c.put(Byte.class, Integer.valueOf(0));
+        DataWatcher.c.put(Short.class, Integer.valueOf(1));
+        DataWatcher.c.put(Integer.class, Integer.valueOf(2));
+        DataWatcher.c.put(Float.class, Integer.valueOf(3));
+        DataWatcher.c.put(String.class, Integer.valueOf(4));
+        DataWatcher.c.put(ItemStack.class, Integer.valueOf(5));
+        DataWatcher.c.put(BlockPosition.class, Integer.valueOf(6));
+        DataWatcher.c.put(Vector3f.class, Integer.valueOf(7));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
new file mode 100644
index 0000000..8357157
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -0,0 +1,123 @@
+package net.minecraft.server;
+
+public class EntityFireworks extends Entity {
+
+    private int ticksFlown;
+    public int expectedLifespan;
+
+    public EntityFireworks(World world) {
+        super(world);
+        this.a(0.25F, 0.25F);
+    }
+
+    protected void h() {
+        this.datawatcher.add(8, 5);
+    }
+
+    public EntityFireworks(World world, double d0, double d1, double d2, ItemStack itemstack) {
+        super(world);
+        this.ticksFlown = 0;
+        this.a(0.25F, 0.25F);
+        this.setPosition(d0, d1, d2);
+        int i = 1;
+
+        if (itemstack != null && itemstack.hasTag()) {
+            this.datawatcher.watch(8, itemstack);
+            NBTTagCompound nbttagcompound = itemstack.getTag();
+            NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Fireworks");
+
+            if (nbttagcompound1 != null) {
+                i += nbttagcompound1.getByte("Flight");
+            }
+        }
+
+        this.motX = this.random.nextGaussian() * 0.001D;
+        this.motZ = this.random.nextGaussian() * 0.001D;
+        this.motY = 0.05D;
+        this.expectedLifespan = 10 * i + this.random.nextInt(6) + this.random.nextInt(7);
+    }
+
+    public void s_() {
+        this.P = this.locX;
+        this.Q = this.locY;
+        this.R = this.locZ;
+        super.s_();
+        this.motX *= 1.15D;
+        this.motZ *= 1.15D;
+        this.motY += 0.04D;
+        this.move(this.motX, this.motY, this.motZ);
+        float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+
+        this.yaw = (float) (Math.atan2(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
+
+        for (this.pitch = (float) (Math.atan2(this.motY, (double) f) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
+            ;
+        }
+
+        while (this.pitch - this.lastPitch >= 180.0F) {
+            this.lastPitch += 360.0F;
+        }
+
+        while (this.yaw - this.lastYaw < -180.0F) {
+            this.lastYaw -= 360.0F;
+        }
+
+        while (this.yaw - this.lastYaw >= 180.0F) {
+            this.lastYaw += 360.0F;
+        }
+
+        this.pitch = this.lastPitch + (this.pitch - this.lastPitch) * 0.2F;
+        this.yaw = this.lastYaw + (this.yaw - this.lastYaw) * 0.2F;
+        if (this.ticksFlown == 0 && !this.R()) {
+            this.world.makeSound(this, "fireworks.launch", 3.0F, 1.0F);
+        }
+
+        ++this.ticksFlown;
+        if (this.world.isStatic && this.ticksFlown % 2 < 2) {
+            this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D, new int[0]);
+        }
+
+        if (!this.world.isStatic && this.ticksFlown > this.expectedLifespan) {
+            this.world.broadcastEntityEffect(this, (byte) 17);
+            this.die();
+        }
+
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setInt("Life", this.ticksFlown);
+        nbttagcompound.setInt("LifeTime", this.expectedLifespan);
+        ItemStack itemstack = this.datawatcher.getItemStack(8);
+
+        if (itemstack != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+            itemstack.save(nbttagcompound1);
+            nbttagcompound.set("FireworksItem", nbttagcompound1);
+        }
+
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        this.ticksFlown = nbttagcompound.getInt("Life");
+        this.expectedLifespan = nbttagcompound.getInt("LifeTime");
+        NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("FireworksItem");
+
+        if (nbttagcompound1 != null) {
+            ItemStack itemstack = ItemStack.createStack(nbttagcompound1);
+
+            if (itemstack != null) {
+                this.datawatcher.watch(8, itemstack);
+            }
+        }
+
+    }
+
+    public float c(float f) {
+        return super.c(f);
+    }
+
+    public boolean aE() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GameProfileBanList.java b/src/main/java/net/minecraft/server/GameProfileBanList.java
new file mode 100644
index 0000000..c1236a1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GameProfileBanList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class GameProfileBanList extends JsonList {
+
+    public GameProfileBanList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry a(JsonObject jsonobject) {
+        return new GameProfileBanEntry(jsonobject);
+    }
+
+    public boolean isBanned(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) gameprofilebanentry.getKey()).getName()) {
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) gameprofilebanentry.getKey()).getName()));
+
+        return (GameProfile) gameprofilebanentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 0000000..54659fd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,606 @@
+package net.minecraft.server;
+
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+
+public class Item {
+
+    public static final RegistryMaterials REGISTRY = new RegistryMaterials();
+    private static final Map a = Maps.newHashMap();
+    protected static final UUID f = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+    private CreativeModeTab b;
+    protected static Random g = new Random();
+    protected int maxStackSize = 64;
+    private int durability;
+    protected boolean i;
+    protected boolean j;
+    private Item craftingResult;
+    private String k;
+    private String name;
+
+    public Item() {}
+
+    public static int getId(Item item) {
+        return item == null ? 0 : Item.REGISTRY.b(item);
+    }
+
+    public static Item getById(int i) {
+        return (Item) Item.REGISTRY.a(i);
+    }
+
+    public static Item getItemOf(Block block) {
+        return (Item) Item.a.get(block);
+    }
+
+    public static Item d(String s) {
+        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            try {
+                return getById(Integer.parseInt(s));
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+        }
+
+        return item;
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        return false;
+    }
+
+    public Item c(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public boolean interactWith(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
+        return false;
+    }
+
+    public float getDestroySpeed(ItemStack itemstack, Block block) {
+        return 1.0F;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        return itemstack;
+    }
+
+    public ItemStack b(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean k() {
+        return this.j;
+    }
+
+    protected Item a(boolean flag) {
+        this.j = flag;
+        return this;
+    }
+
+    public int getMaxDurability() {
+        return this.durability;
+    }
+
+    protected Item setMaxDurability(int i) {
+        this.durability = i;
+        return this;
+    }
+
+    public boolean usesDurability() {
+        return this.durability > 0 && !this.j;
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, World world, Block block, BlockPosition blockposition, EntityLiving entityliving) {
+        return false;
+    }
+
+    public boolean canDestroySpecialBlock(Block block) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving) {
+        return false;
+    }
+
+    public Item n() {
+        this.i = true;
+        return this;
+    }
+
+    public Item c(String s) {
+        this.name = s;
+        return this;
+    }
+
+    public String k(ItemStack itemstack) {
+        String s = this.e_(itemstack);
+
+        return s == null ? "" : LocaleI18n.get(s);
+    }
+
+    public String getName() {
+        return "item." + this.name;
+    }
+
+    public String e_(ItemStack itemstack) {
+        return "item." + this.name;
+    }
+
+    public Item c(Item item) {
+        this.craftingResult = item;
+        return this;
+    }
+
+    public boolean p() {
+        return true;
+    }
+
+    public Item q() {
+        return this.craftingResult;
+    }
+
+    public boolean r() {
+        return this.craftingResult != null;
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void d(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean f() {
+        return false;
+    }
+
+    public EnumAnimation e(ItemStack itemstack) {
+        return EnumAnimation.NONE;
+    }
+
+    public int d(ItemStack itemstack) {
+        return 0;
+    }
+
+    public void a(ItemStack itemstack, World world, EntityHuman entityhuman, int i) {}
+
+    protected Item e(String s) {
+        this.k = s;
+        return this;
+    }
+
+    public String j(ItemStack itemstack) {
+        return this.k;
+    }
+
+    public boolean l(ItemStack itemstack) {
+        return this.j(itemstack) != null;
+    }
+
+    public String a(ItemStack itemstack) {
+        return ("" + LocaleI18n.get(this.k(itemstack) + ".name")).trim();
+    }
+
+    public EnumItemRarity g(ItemStack itemstack) {
+        return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+    }
+
+    public boolean f_(ItemStack itemstack) {
+        return this.getMaxStackSize() == 1 && this.usesDurability();
+    }
+
+    protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+        float f = entityhuman.lastPitch + (entityhuman.pitch - entityhuman.lastPitch);
+        float f1 = entityhuman.lastYaw + (entityhuman.yaw - entityhuman.lastYaw);
+        double d0 = entityhuman.lastX + (entityhuman.locX - entityhuman.lastX);
+        double d1 = entityhuman.lastY + (entityhuman.locY - entityhuman.lastY) + (double) entityhuman.getHeadHeight();
+        double d2 = entityhuman.lastZ + (entityhuman.locZ - entityhuman.lastZ);
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
+        float f6 = f3 * f4;
+        float f7 = f2 * f4;
+        double d3 = 5.0D;
+        Vec3D vec3d1 = vec3d.add((double) f6 * d3, (double) f5 * d3, (double) f7 * d3);
+
+        return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+    }
+
+    public int b() {
+        return 0;
+    }
+
+    public Item a(CreativeModeTab creativemodetab) {
+        this.b = creativemodetab;
+        return this;
+    }
+
+    public boolean s() {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return false;
+    }
+
+    public Multimap i() {
+        return HashMultimap.create();
+    }
+
+    public static void t() {
+        a(Blocks.STONE, (Item) (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new DisplayStateFunctionStoneVariant())).b("stone"));
+        a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+        a(Blocks.DIRT, (Item) (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new DisplayStateFunctionDirtVariant())).b("dirt"));
+        c(Blocks.COBBLESTONE);
+        a(Blocks.PLANKS, (Item) (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new DisplayStateFunctionLogVariant())).b("wood"));
+        a(Blocks.SAPLING, (Item) (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new DisplayStateFunctionLogVariant2())).b("sapling"));
+        c(Blocks.BEDROCK);
+        a((Block) Blocks.SAND, (Item) (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new DisplayStateFunctionSandVariant())).b("sand"));
+        c(Blocks.GRAVEL);
+        c(Blocks.GOLD_ORE);
+        c(Blocks.IRON_ORE);
+        c(Blocks.COAL_ORE);
+        a(Blocks.LOG, (Item) (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new DisplayStateFunctionLogVariant3())).b("log"));
+        a(Blocks.LOG2, (Item) (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new DisplayStateFunction4())).b("log"));
+        a((Block) Blocks.LEAVES, (Item) (new ItemLeaves(Blocks.LEAVES)).b("leaves"));
+        a((Block) Blocks.LEAVES2, (Item) (new ItemLeaves(Blocks.LEAVES2)).b("leaves"));
+        a(Blocks.SPONGE, (Item) (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new DisplayStateFunctionSponge())).b("sponge"));
+        c(Blocks.GLASS);
+        c(Blocks.LAPIS_ORE);
+        c(Blocks.LAPIS_BLOCK);
+        c(Blocks.DISPENSER);
+        a(Blocks.SANDSTONE, (Item) (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new DisplayStateFunctionSandstoneVariant())).b("sandStone"));
+        c(Blocks.NOTEBLOCK);
+        c(Blocks.GOLDEN_RAIL);
+        c(Blocks.DETECTOR_RAIL);
+        a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+        c(Blocks.WEB);
+        a((Block) Blocks.TALLGRASS, (Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern"}));
+        c((Block) Blocks.DEADBUSH);
+        a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+        a(Blocks.WOOL, (Item) (new ItemCloth(Blocks.WOOL)).b("cloth"));
+        a((Block) Blocks.YELLOW_FLOWER, (Item) (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new DisplayStateFunctionYellowFlower())).b("flower"));
+        a((Block) Blocks.RED_FLOWER, (Item) (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new DisplayStateFunctionRedFlower())).b("rose"));
+        c((Block) Blocks.BROWN_MUSHROOM);
+        c((Block) Blocks.RED_MUSHROOM);
+        c(Blocks.GOLD_BLOCK);
+        c(Blocks.IRON_BLOCK);
+        a((Block) Blocks.STONE_SLAB, (Item) (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).b("stoneSlab"));
+        c(Blocks.BRICK_BLOCK);
+        c(Blocks.TNT);
+        c(Blocks.BOOKSHELF);
+        c(Blocks.MOSSY_COBBLESTONE);
+        c(Blocks.OBSIDIAN);
+        c(Blocks.TORCH);
+        c(Blocks.MOB_SPAWNER);
+        c(Blocks.OAK_STAIRS);
+        c((Block) Blocks.CHEST);
+        c(Blocks.DIAMOND_ORE);
+        c(Blocks.DIAMOND_BLOCK);
+        c(Blocks.CRAFTING_TABLE);
+        c(Blocks.FARMLAND);
+        c(Blocks.FURNACE);
+        c(Blocks.LIT_FURNACE);
+        c(Blocks.LADDER);
+        c(Blocks.RAIL);
+        c(Blocks.STONE_STAIRS);
+        c(Blocks.LEVER);
+        c(Blocks.STONE_PRESSURE_PLATE);
+        c(Blocks.WOODEN_PRESSURE_PLATE);
+        c(Blocks.REDSTONE_ORE);
+        c(Blocks.REDSTONE_TORCH);
+        c(Blocks.STONE_BUTTON);
+        a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+        c(Blocks.ICE);
+        c(Blocks.SNOW);
+        c((Block) Blocks.CACTUS);
+        c(Blocks.CLAY);
+        c(Blocks.JUKEBOX);
+        c(Blocks.FENCE);
+        c(Blocks.SPRUCE_FENCE);
+        c(Blocks.BIRCH_FENCE);
+        c(Blocks.JUNGLE_FENCE);
+        c(Blocks.DARK_OAK_FENCE);
+        c(Blocks.ACACIA_FENCE);
+        c(Blocks.PUMPKIN);
+        c(Blocks.NETHERRACK);
+        c(Blocks.SOUL_SAND);
+        c(Blocks.GLOWSTONE);
+        c(Blocks.LIT_PUMPKIN);
+        c(Blocks.TRAPDOOR);
+        a(Blocks.MONSTER_EGG, (Item) (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new DisplayStateFunctionMonsterEggVarient())).b("monsterStoneEgg"));
+        a(Blocks.STONEBRICK, (Item) (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new DisplayStateFunctionStonebrickType())).b("stonebricksmooth"));
+        c(Blocks.BROWN_MUSHROOM_BLOCK);
+        c(Blocks.RED_MUSHROOM_BLOCK);
+        c(Blocks.IRON_BARS);
+        c(Blocks.GLASS_PANE);
+        c(Blocks.MELON_BLOCK);
+        a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+        c(Blocks.FENCE_GATE);
+        c(Blocks.SPRUCE_FENCE_GATE);
+        c(Blocks.BIRCH_FENCE_GATE);
+        c(Blocks.JUNGLE_FENCE_GATE);
+        c(Blocks.DARK_OAK_FENCE_GATE);
+        c(Blocks.ACACIA_FENCE_GATE);
+        c(Blocks.BRICK_STAIRS);
+        c(Blocks.STONE_BRICK_STAIRS);
+        c((Block) Blocks.MYCELIUM);
+        a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+        c(Blocks.NETHER_BRICK);
+        c(Blocks.NETHER_BRICK_FENCE);
+        c(Blocks.NETHER_BRICK_STAIRS);
+        c(Blocks.ENCHANTING_TABLE);
+        c(Blocks.END_PORTAL_FRAME);
+        c(Blocks.END_STONE);
+        c(Blocks.DRAGON_EGG);
+        c(Blocks.REDSTONE_LAMP);
+        a((Block) Blocks.WOODEN_SLAB, (Item) (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).b("woodSlab"));
+        c(Blocks.SANDSTONE_STAIRS);
+        c(Blocks.EMERALD_ORE);
+        c(Blocks.ENDER_CHEST);
+        c((Block) Blocks.TRIPWIRE_HOOK);
+        c(Blocks.EMERALD_BLOCK);
+        c(Blocks.SPRUCE_STAIRS);
+        c(Blocks.BIRCH_STAIRS);
+        c(Blocks.JUNGLE_STAIRS);
+        c(Blocks.COMMAND_BLOCK);
+        c((Block) Blocks.BEACON);
+        a(Blocks.COBBLESTONE_WALL, (Item) (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new DisplayStateFunctionCobbleVariant())).b("cobbleWall"));
+        c(Blocks.WOODEN_BUTTON);
+        a(Blocks.ANVIL, (Item) (new ItemAnvil(Blocks.ANVIL)).b("anvil"));
+        c(Blocks.TRAPPED_CHEST);
+        c(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+        c(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+        c((Block) Blocks.DAYLIGHT_DETECTOR);
+        c(Blocks.REDSTONE_BLOCK);
+        c(Blocks.QUARTZ_ORE);
+        c((Block) Blocks.HOPPER);
+        a(Blocks.QUARTZ_BLOCK, (Item) (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, new String[] { "default", "chiseled", "lines"})).b("quartzBlock"));
+        c(Blocks.QUARTZ_STAIRS);
+        c(Blocks.ACTIVATOR_RAIL);
+        c(Blocks.DROPPER);
+        a(Blocks.STAINED_HARDENED_CLAY, (Item) (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).b("clayHardenedStained"));
+        c(Blocks.BARRIER);
+        c(Blocks.IRON_TRAPDOOR);
+        c(Blocks.HAY_BLOCK);
+        a(Blocks.CARPET, (Item) (new ItemCloth(Blocks.CARPET)).b("woolCarpet"));
+        c(Blocks.HARDENED_CLAY);
+        c(Blocks.COAL_BLOCK);
+        c(Blocks.PACKED_ICE);
+        c(Blocks.ACACIA_STAIRS);
+        c(Blocks.DARK_OAK_STAIRS);
+        c(Blocks.SLIME);
+        a((Block) Blocks.DOUBLE_PLANT, (Item) (new ItemTallPlant(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new DisplayStateFunctionTallFlowerVariants())).b("doublePlant"));
+        a((Block) Blocks.STAINED_GLASS, (Item) (new ItemCloth(Blocks.STAINED_GLASS)).b("stainedGlass"));
+        a((Block) Blocks.STAINED_GLASS_PANE, (Item) (new ItemCloth(Blocks.STAINED_GLASS_PANE)).b("stainedGlassPane"));
+        a(Blocks.PRISMARINE, (Item) (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new DisplayStateFunctionPrismarineVariant())).b("prismarine"));
+        c(Blocks.SEA_LANTERN);
+        a(Blocks.RED_SANDSTONE, (Item) (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new DisplayStateFunctionRedSandstoneVariant())).b("redSandStone"));
+        c(Blocks.RED_SANDSTONE_STAIRS);
+        a((Block) Blocks.STONE_SLAB2, (Item) (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2)).b("stoneSlab2"));
+        a(256, "iron_shovel", (new ItemSpade(EnumToolMaterial.IRON)).c("shovelIron"));
+        a(257, "iron_pickaxe", (new ItemPickaxe(EnumToolMaterial.IRON)).c("pickaxeIron"));
+        a(258, "iron_axe", (new ItemAxe(EnumToolMaterial.IRON)).c("hatchetIron"));
+        a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+        a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+        a(261, "bow", (new ItemBow()).c("bow"));
+        a(262, "arrow", (new Item()).c("arrow").a(CreativeModeTab.j));
+        a(263, "coal", (new ItemCoal()).c("coal"));
+        a(264, "diamond", (new Item()).c("diamond").a(CreativeModeTab.l));
+        a(265, "iron_ingot", (new Item()).c("ingotIron").a(CreativeModeTab.l));
+        a(266, "gold_ingot", (new Item()).c("ingotGold").a(CreativeModeTab.l));
+        a(267, "iron_sword", (new ItemSword(EnumToolMaterial.IRON)).c("swordIron"));
+        a(268, "wooden_sword", (new ItemSword(EnumToolMaterial.WOOD)).c("swordWood"));
+        a(269, "wooden_shovel", (new ItemSpade(EnumToolMaterial.WOOD)).c("shovelWood"));
+        a(270, "wooden_pickaxe", (new ItemPickaxe(EnumToolMaterial.WOOD)).c("pickaxeWood"));
+        a(271, "wooden_axe", (new ItemAxe(EnumToolMaterial.WOOD)).c("hatchetWood"));
+        a(272, "stone_sword", (new ItemSword(EnumToolMaterial.STONE)).c("swordStone"));
+        a(273, "stone_shovel", (new ItemSpade(EnumToolMaterial.STONE)).c("shovelStone"));
+        a(274, "stone_pickaxe", (new ItemPickaxe(EnumToolMaterial.STONE)).c("pickaxeStone"));
+        a(275, "stone_axe", (new ItemAxe(EnumToolMaterial.STONE)).c("hatchetStone"));
+        a(276, "diamond_sword", (new ItemSword(EnumToolMaterial.EMERALD)).c("swordDiamond"));
+        a(277, "diamond_shovel", (new ItemSpade(EnumToolMaterial.EMERALD)).c("shovelDiamond"));
+        a(278, "diamond_pickaxe", (new ItemPickaxe(EnumToolMaterial.EMERALD)).c("pickaxeDiamond"));
+        a(279, "diamond_axe", (new ItemAxe(EnumToolMaterial.EMERALD)).c("hatchetDiamond"));
+        a(280, "stick", (new Item()).n().c("stick").a(CreativeModeTab.l));
+        a(281, "bowl", (new Item()).c("bowl").a(CreativeModeTab.l));
+        a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+        a(283, "golden_sword", (new ItemSword(EnumToolMaterial.GOLD)).c("swordGold"));
+        a(284, "golden_shovel", (new ItemSpade(EnumToolMaterial.GOLD)).c("shovelGold"));
+        a(285, "golden_pickaxe", (new ItemPickaxe(EnumToolMaterial.GOLD)).c("pickaxeGold"));
+        a(286, "golden_axe", (new ItemAxe(EnumToolMaterial.GOLD)).c("hatchetGold"));
+        a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").a(CreativeModeTab.l));
+        a(288, "feather", (new Item()).c("feather").a(CreativeModeTab.l));
+        a(289, "gunpowder", (new Item()).c("sulphur").e(PotionBrewer.k).a(CreativeModeTab.l));
+        a(290, "wooden_hoe", (new ItemHoe(EnumToolMaterial.WOOD)).c("hoeWood"));
+        a(291, "stone_hoe", (new ItemHoe(EnumToolMaterial.STONE)).c("hoeStone"));
+        a(292, "iron_hoe", (new ItemHoe(EnumToolMaterial.IRON)).c("hoeIron"));
+        a(293, "diamond_hoe", (new ItemHoe(EnumToolMaterial.EMERALD)).c("hoeDiamond"));
+        a(294, "golden_hoe", (new ItemHoe(EnumToolMaterial.GOLD)).c("hoeGold"));
+        a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+        a(296, "wheat", (new Item()).c("wheat").a(CreativeModeTab.l));
+        a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+        a(298, "leather_helmet", (new ItemArmor(EnumArmorMaterial.LEATHER, 0, 0)).c("helmetCloth"));
+        a(299, "leather_chestplate", (new ItemArmor(EnumArmorMaterial.LEATHER, 0, 1)).c("chestplateCloth"));
+        a(300, "leather_leggings", (new ItemArmor(EnumArmorMaterial.LEATHER, 0, 2)).c("leggingsCloth"));
+        a(301, "leather_boots", (new ItemArmor(EnumArmorMaterial.LEATHER, 0, 3)).c("bootsCloth"));
+        a(302, "chainmail_helmet", (new ItemArmor(EnumArmorMaterial.CHAIN, 1, 0)).c("helmetChain"));
+        a(303, "chainmail_chestplate", (new ItemArmor(EnumArmorMaterial.CHAIN, 1, 1)).c("chestplateChain"));
+        a(304, "chainmail_leggings", (new ItemArmor(EnumArmorMaterial.CHAIN, 1, 2)).c("leggingsChain"));
+        a(305, "chainmail_boots", (new ItemArmor(EnumArmorMaterial.CHAIN, 1, 3)).c("bootsChain"));
+        a(306, "iron_helmet", (new ItemArmor(EnumArmorMaterial.IRON, 2, 0)).c("helmetIron"));
+        a(307, "iron_chestplate", (new ItemArmor(EnumArmorMaterial.IRON, 2, 1)).c("chestplateIron"));
+        a(308, "iron_leggings", (new ItemArmor(EnumArmorMaterial.IRON, 2, 2)).c("leggingsIron"));
+        a(309, "iron_boots", (new ItemArmor(EnumArmorMaterial.IRON, 2, 3)).c("bootsIron"));
+        a(310, "diamond_helmet", (new ItemArmor(EnumArmorMaterial.DIAMOND, 3, 0)).c("helmetDiamond"));
+        a(311, "diamond_chestplate", (new ItemArmor(EnumArmorMaterial.DIAMOND, 3, 1)).c("chestplateDiamond"));
+        a(312, "diamond_leggings", (new ItemArmor(EnumArmorMaterial.DIAMOND, 3, 2)).c("leggingsDiamond"));
+        a(313, "diamond_boots", (new ItemArmor(EnumArmorMaterial.DIAMOND, 3, 3)).c("bootsDiamond"));
+        a(314, "golden_helmet", (new ItemArmor(EnumArmorMaterial.GOLD, 4, 0)).c("helmetGold"));
+        a(315, "golden_chestplate", (new ItemArmor(EnumArmorMaterial.GOLD, 4, 1)).c("chestplateGold"));
+        a(316, "golden_leggings", (new ItemArmor(EnumArmorMaterial.GOLD, 4, 2)).c("leggingsGold"));
+        a(317, "golden_boots", (new ItemArmor(EnumArmorMaterial.GOLD, 4, 3)).c("bootsGold"));
+        a(318, "flint", (new Item()).c("flint").a(CreativeModeTab.l));
+        a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+        a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+        a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+        a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().a(MobEffectList.REGENERATION.id, 5, 1, 1.0F).c("appleGold"));
+        a(323, "sign", (new ItemSign()).c("sign"));
+        a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+        Item item = (new ItemBucket(Blocks.AIR)).c("bucket").c(16);
+
+        a(325, "bucket", item);
+        a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").c(item));
+        a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").c(item));
+        a(328, "minecart", (new ItemMinecart(EnumMinecartType.RIDEABLE)).c("minecart"));
+        a(329, "saddle", (new ItemSaddle()).c("saddle"));
+        a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+        a(331, "redstone", (new ItemRedstone()).c("redstone").e(PotionBrewer.i));
+        a(332, "snowball", (new ItemSnowball()).c("snowball"));
+        a(333, "boat", (new ItemBoat()).c("boat"));
+        a(334, "leather", (new Item()).c("leather").a(CreativeModeTab.l));
+        a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").c(item));
+        a(336, "brick", (new Item()).c("brick").a(CreativeModeTab.l));
+        a(337, "clay_ball", (new Item()).c("clay").a(CreativeModeTab.l));
+        a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").a(CreativeModeTab.l));
+        a(339, "paper", (new Item()).c("paper").a(CreativeModeTab.f));
+        a(340, "book", (new ItemBook()).c("book").a(CreativeModeTab.f));
+        a(341, "slime_ball", (new Item()).c("slimeball").a(CreativeModeTab.f));
+        a(342, "chest_minecart", (new ItemMinecart(EnumMinecartType.CHEST)).c("minecartChest"));
+        a(343, "furnace_minecart", (new ItemMinecart(EnumMinecartType.FURNACE)).c("minecartFurnace"));
+        a(344, "egg", (new ItemEgg()).c("egg"));
+        a(345, "compass", (new Item()).c("compass").a(CreativeModeTab.i));
+        a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+        a(347, "clock", (new Item()).c("clock").a(CreativeModeTab.i));
+        a(348, "glowstone_dust", (new Item()).c("yellowDust").e(PotionBrewer.j).a(CreativeModeTab.l));
+        a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+        a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+        a(351, "dye", (new ItemDye()).c("dyePowder"));
+        a(352, "bone", (new Item()).c("bone").n().a(CreativeModeTab.f));
+        a(353, "sugar", (new Item()).c("sugar").e(PotionBrewer.b).a(CreativeModeTab.l));
+        a(354, "cake", (new ItemReed(Blocks.CAKE)).c(1).c("cake").a(CreativeModeTab.h));
+        a(355, "bed", (new ItemBed()).c(1).c("bed"));
+        a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").a(CreativeModeTab.d));
+        a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+        a(358, "filled_map", (new ItemWorldMap()).c("map"));
+        a(359, "shears", (new ItemShears()).c("shears"));
+        a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+        a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+        a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+        a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+        a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+        a(365, "chicken", (new ItemFood(2, 0.3F, true)).a(MobEffectList.HUNGER.id, 30, 0, 0.3F).c("chickenRaw"));
+        a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+        a(367, "rotten_flesh", (new ItemFood(4, 0.1F, true)).a(MobEffectList.HUNGER.id, 30, 0, 0.8F).c("rottenFlesh"));
+        a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+        a(369, "blaze_rod", (new Item()).c("blazeRod").a(CreativeModeTab.l).n());
+        a(370, "ghast_tear", (new Item()).c("ghastTear").e(PotionBrewer.c).a(CreativeModeTab.k));
+        a(371, "gold_nugget", (new Item()).c("goldNugget").a(CreativeModeTab.l));
+        a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds").e("+4"));
+        a(373, "potion", (new ItemPotion()).c("potion"));
+        a(374, "glass_bottle", (new ItemGlassBottle()).c("glassBottle"));
+        a(375, "spider_eye", (new ItemFood(2, 0.8F, false)).a(MobEffectList.POISON.id, 5, 0, 1.0F).c("spiderEye").e(PotionBrewer.d));
+        a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").e(PotionBrewer.e).a(CreativeModeTab.k));
+        a(377, "blaze_powder", (new Item()).c("blazePowder").e(PotionBrewer.g).a(CreativeModeTab.k));
+        a(378, "magma_cream", (new Item()).c("magmaCream").e(PotionBrewer.h).a(CreativeModeTab.k));
+        a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").a(CreativeModeTab.k));
+        a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").a(CreativeModeTab.k));
+        a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+        a(382, "speckled_melon", (new Item()).c("speckledMelon").e(PotionBrewer.f).a(CreativeModeTab.k));
+        a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+        a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+        a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+        a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").a(CreativeModeTab.f));
+        a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").c(16));
+        a(388, "emerald", (new Item()).c("emerald").a(CreativeModeTab.l));
+        a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+        a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").a(CreativeModeTab.c));
+        a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+        a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+        a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+        a(394, "poisonous_potato", (new ItemFood(2, 0.3F, false)).a(MobEffectList.POISON.id, 5, 0, 0.6F).c("potatoPoisonous"));
+        a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+        a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").e(PotionBrewer.l).a(CreativeModeTab.k));
+        a(397, "skull", (new ItemSkull()).c("skull"));
+        a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+        a(399, "nether_star", (new ItemNetherStar()).c("netherStar").a(CreativeModeTab.l));
+        a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").a(CreativeModeTab.h));
+        a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+        a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").a(CreativeModeTab.f));
+        a(403, "enchanted_book", (new ItemEnchantedBook()).c(1).c("enchantedBook"));
+        a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").a(CreativeModeTab.d));
+        a(405, "netherbrick", (new Item()).c("netherbrick").a(CreativeModeTab.l));
+        a(406, "quartz", (new Item()).c("netherquartz").a(CreativeModeTab.l));
+        a(407, "tnt_minecart", (new ItemMinecart(EnumMinecartType.TNT)).c("minecartTnt"));
+        a(408, "hopper_minecart", (new ItemMinecart(EnumMinecartType.HOPPER)).c("minecartHopper"));
+        a(409, "prismarine_shard", (new Item()).c("prismarineShard").a(CreativeModeTab.l));
+        a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").a(CreativeModeTab.l));
+        a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+        a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+        a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+        a(414, "rabbit_foot", (new Item()).c("rabbitFoot").e(PotionBrewer.n).a(CreativeModeTab.k));
+        a(415, "rabbit_hide", (new Item()).c("rabbitHide").a(CreativeModeTab.l));
+        a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").c(16));
+        a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").c(1).a(CreativeModeTab.f));
+        a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").c(1).a(CreativeModeTab.f));
+        a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").c(1).a(CreativeModeTab.f));
+        a(420, "lead", (new ItemLeash()).c("leash"));
+        a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+        a(422, "command_block_minecart", (new ItemMinecart(EnumMinecartType.COMMAND_BLOCK)).c("minecartCommandBlock").a((CreativeModeTab) null));
+        a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+        a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+        a(425, "banner", (new ItemBanner()).b("banner"));
+        a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+        a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+        a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+        a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+        a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+        a(2256, "record_13", (new ItemRecord("13")).c("record"));
+        a(2257, "record_cat", (new ItemRecord("cat")).c("record"));
+        a(2258, "record_blocks", (new ItemRecord("blocks")).c("record"));
+        a(2259, "record_chirp", (new ItemRecord("chirp")).c("record"));
+        a(2260, "record_far", (new ItemRecord("far")).c("record"));
+        a(2261, "record_mall", (new ItemRecord("mall")).c("record"));
+        a(2262, "record_mellohi", (new ItemRecord("mellohi")).c("record"));
+        a(2263, "record_stal", (new ItemRecord("stal")).c("record"));
+        a(2264, "record_strad", (new ItemRecord("strad")).c("record"));
+        a(2265, "record_ward", (new ItemRecord("ward")).c("record"));
+        a(2266, "record_11", (new ItemRecord("11")).c("record"));
+        a(2267, "record_wait", (new ItemRecord("wait")).c("record"));
+    }
+
+    private static void c(Block block) {
+        a(block, (Item) (new ItemBlock(block)));
+    }
+
+    protected static void a(Block block, Item item) {
+        a(Block.getId(block), (MinecraftKey) Block.REGISTRY.c(block), item);
+        Item.a.put(block, item);
+    }
+
+    private static void a(int i, String s, Item item) {
+        a(i, new MinecraftKey(s), item);
+    }
+
+    private static void a(int i, MinecraftKey minecraftkey, Item item) {
+        Item.REGISTRY.a(i, minecraftkey, item);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
new file mode 100644
index 0000000..93e2b53
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -0,0 +1,124 @@
+package net.minecraft.server;
+
+import com.mojang.authlib.GameProfile;
+import java.util.UUID;
+
+public class ItemSkull extends Item {
+
+    private static final String[] a = new String[] { "skeleton", "wither", "zombie", "char", "creeper"};
+
+    public ItemSkull() {
+        this.a(CreativeModeTab.c);
+        this.setMaxDurability(0);
+        this.a(true);
+    }
+
+    public boolean interactWith(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (enumdirection == EnumDirection.DOWN) {
+            return false;
+        } else {
+            IBlockData iblockdata = world.getType(blockposition);
+            Block block = iblockdata.getBlock();
+            boolean flag = block.f(world, blockposition);
+
+            if (!flag) {
+                if (!world.getType(blockposition).getBlock().getMaterial().isBuildable()) {
+                    return false;
+                }
+
+                blockposition = blockposition.shift(enumdirection);
+            }
+
+            if (!entityhuman.a(blockposition, enumdirection, itemstack)) {
+                return false;
+            } else if (!Blocks.SKULL.canPlace(world, blockposition)) {
+                return false;
+            } else {
+                if (!world.isStatic) {
+                    world.setTypeAndData(blockposition, Blocks.SKULL.getBlockData().set(BlockSkull.FACING, enumdirection), 3);
+                    int i = 0;
+
+                    if (enumdirection == EnumDirection.UP) {
+                        i = MathHelper.floor((double) (entityhuman.yaw * 16.0F / 360.0F) + 0.5D) & 15;
+                    }
+
+                    TileEntity tileentity = world.getTileEntity(blockposition);
+
+                    if (tileentity instanceof TileEntitySkull) {
+                        TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
+
+                        if (itemstack.getData() == 3) {
+                            GameProfile gameprofile = null;
+
+                            if (itemstack.hasTag()) {
+                                NBTTagCompound nbttagcompound = itemstack.getTag();
+
+                                if (nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
+                                    gameprofile = GameProfileSerializer.deserialize(nbttagcompound.getCompound("SkullOwner"));
+                                } else if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
+                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+                                }
+                            }
+
+                            tileentityskull.setGameProfile(gameprofile);
+                        } else {
+                            tileentityskull.setSkullType(itemstack.getData());
+                        }
+
+                        tileentityskull.setRotation(i);
+                        Blocks.SKULL.a(world, blockposition, tileentityskull);
+                    }
+
+                    --itemstack.count;
+                }
+
+                return true;
+            }
+        }
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+
+    public String e_(ItemStack itemstack) {
+        int i = itemstack.getData();
+
+        if (i < 0 || i >= ItemSkull.a.length) {
+            i = 0;
+        }
+
+        return super.getName() + "." + ItemSkull.a[i];
+    }
+
+    public String a(ItemStack itemstack) {
+        if (itemstack.getData() == 3 && itemstack.hasTag()) {
+            if (itemstack.getTag().hasKeyOfType("SkullOwner", 8)) {
+                return LocaleI18n.a("item.skull.player.name", new Object[] { itemstack.getTag().getString("SkullOwner")});
+            }
+
+            if (itemstack.getTag().hasKeyOfType("SkullOwner", 10)) {
+                NBTTagCompound nbttagcompound = itemstack.getTag().getCompound("SkullOwner");
+
+                if (nbttagcompound.hasKeyOfType("Name", 8)) {
+                    return LocaleI18n.a("item.skull.player.name", new Object[] { nbttagcompound.getString("Name")});
+                }
+            }
+        }
+
+        return super.a(itemstack);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
+            GameProfile gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+
+            gameprofile = TileEntitySkull.b(gameprofile);
+            nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(), gameprofile));
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/OpList.java b/src/main/java/net/minecraft/server/OpList.java
new file mode 100644
index 0000000..4fcf7fb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/OpList.java
@@ -0,0 +1,54 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class OpList extends JsonList {
+
+    public OpList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry a(JsonObject jsonobject) {
+        return new OpListEntry(jsonobject);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        OpListEntry oplistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) oplistentry.getKey()).getName()) {
+            oplistentry = (OpListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        OpListEntry oplistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            oplistentry = (OpListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) oplistentry.getKey()).getName()));
+
+        return (GameProfile) oplistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
new file mode 100644
index 0000000..97920b0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
@@ -0,0 +1,41 @@
+package net.minecraft.server;
+
+public class PacketHandshakingInSetProtocol implements Packet {
+
+    private int a;
+    public String b;
+    public int c;
+    private EnumProtocol d;
+
+    public PacketHandshakingInSetProtocol() {}
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.c(255);
+        this.c = packetdataserializer.readUnsignedShort();
+        this.d = EnumProtocol.a(packetdataserializer.e());
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeShort(this.c);
+        packetdataserializer.b(this.d.a());
+    }
+
+    public void a(PacketHandshakingInListener packethandshakinginlistener) {
+        packethandshakinginlistener.a(this);
+    }
+
+    public EnumProtocol a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.a;
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketHandshakingInListener) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
new file mode 100644
index 0000000..8560c78
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
@@ -0,0 +1,36 @@
+package net.minecraft.server;
+
+public class PacketPlayOutAttachEntity implements Packet {
+
+    private int a;
+    private int b;
+    private int c;
+
+    public PacketPlayOutAttachEntity() {}
+
+    public PacketPlayOutAttachEntity(int i, Entity entity, Entity entity1) {
+        this.a = i;
+        this.b = entity.getId();
+        this.c = entity1 != null ? entity1.getId() : -1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.b = packetdataserializer.readInt();
+        this.c = packetdataserializer.readInt();
+        this.a = packetdataserializer.readUnsignedByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeByte(this.a);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
new file mode 100644
index 0000000..5c1068c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -0,0 +1,40 @@
+package net.minecraft.server;
+
+public class PacketPlayOutChat implements Packet {
+
+    private IChatBaseComponent a;
+    private byte b;
+
+    public PacketPlayOutChat() {}
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent) {
+        this(ichatbasecomponent, (byte) 1);
+    }
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent, byte b0) {
+        this.a = ichatbasecomponent;
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.d();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public boolean b() {
+        return this.b == 1 || this.b == 2;
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
new file mode 100644
index 0000000..c04f007
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
@@ -0,0 +1,32 @@
+package net.minecraft.server;
+
+public class PacketPlayOutEntityHeadRotation implements Packet {
+
+    private int a;
+    private byte b;
+
+    public PacketPlayOutEntityHeadRotation() {}
+
+    public PacketPlayOutEntityHeadRotation(Entity entity, byte b0) {
+        this.a = entity.getId();
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
new file mode 100644
index 0000000..6433ef7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import java.util.List;
+
+public class PacketPlayOutEntityMetadata implements Packet {
+
+    private int a;
+    private List b;
+
+    public PacketPlayOutEntityMetadata() {}
+
+    public PacketPlayOutEntityMetadata(int i, DataWatcher datawatcher, boolean flag) {
+        this.a = i;
+        if (flag) {
+            this.b = datawatcher.c();
+        } else {
+            this.b = datawatcher.b();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        DataWatcher.a(this.b, packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
new file mode 100644
index 0000000..8fc7414
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
@@ -0,0 +1,62 @@
+package net.minecraft.server;
+
+public class PacketPlayOutEntityTeleport implements Packet {
+
+    private int a;
+    private int b;
+    private int c;
+    private int d;
+    private byte e;
+    private byte f;
+    private boolean g;
+
+    public PacketPlayOutEntityTeleport() {}
+
+    public PacketPlayOutEntityTeleport(Entity entity) {
+        this.a = entity.getId();
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        this.e = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
+        this.f = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
+        this.g = entity.onGround;
+    }
+
+    public PacketPlayOutEntityTeleport(int i, int j, int k, int l, byte b0, byte b1, boolean flag) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.d = l;
+        this.e = b0;
+        this.f = b1;
+        this.g = flag;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readInt();
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.e = packetdataserializer.readByte();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readBoolean();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeByte(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeBoolean(this.g);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
new file mode 100644
index 0000000..e24d3ae
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -0,0 +1,114 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class PacketPlayOutMapChunk implements Packet {
+
+    private int a;
+    private int b;
+    private ChunkMap c;
+    private boolean d;
+
+    public PacketPlayOutMapChunk() {}
+
+    public PacketPlayOutMapChunk(Chunk chunk, boolean flag, int i) {
+        this.a = chunk.locX;
+        this.b = chunk.locZ;
+        this.d = flag;
+        this.c = a(chunk, flag, !chunk.getWorld().worldProvider.o(), i);
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.readInt();
+        this.b = packetdataserializer.readInt();
+        this.d = packetdataserializer.readBoolean();
+        this.c = new ChunkMap();
+        this.c.b = packetdataserializer.readShort();
+        this.c.a = packetdataserializer.a();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.writeInt(this.a);
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeBoolean(this.d);
+        packetdataserializer.writeShort((short) (this.c.b & '\uffff'));
+        packetdataserializer.a(this.c.a);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    protected static int a(int i, boolean flag, boolean flag1) {
+        int j = i * 2 * 16 * 16 * 16;
+        int k = i * 16 * 16 * 16 / 2;
+        int l = flag ? i * 16 * 16 * 16 / 2 : 0;
+        int i1 = flag1 ? 256 : 0;
+
+        return j + k + l + i1;
+    }
+
+    public static ChunkMap a(Chunk chunk, boolean flag, boolean flag1, int i) {
+        ChunkSection[] achunksection = chunk.getSections();
+        ChunkMap chunkmap = new ChunkMap();
+        ArrayList arraylist = Lists.newArrayList();
+
+        int j;
+
+        for (j = 0; j < achunksection.length; ++j) {
+            ChunkSection chunksection = achunksection[j];
+
+            if (chunksection != null && (!flag || !chunksection.a()) && (i & 1 << j) != 0) {
+                chunkmap.b |= 1 << j;
+                arraylist.add(chunksection);
+            }
+        }
+
+        chunkmap.a = new byte[a(Integer.bitCount(chunkmap.b), flag1, flag)];
+        j = 0;
+        Iterator iterator = arraylist.iterator();
+
+        ChunkSection chunksection1;
+
+        while (iterator.hasNext()) {
+            chunksection1 = (ChunkSection) iterator.next();
+            char[] achar = chunksection1.getIdArray();
+            char[] achar1 = achar;
+            int k = achar.length;
+
+            for (int l = 0; l < k; ++l) {
+                char c0 = achar1[l];
+
+                chunkmap.a[j++] = (byte) (c0 & 255);
+                chunkmap.a[j++] = (byte) (c0 >> 8 & 255);
+            }
+        }
+
+        for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getEmittedLightArray().a(), chunkmap.a, j)) {
+            chunksection1 = (ChunkSection) iterator.next();
+        }
+
+        if (flag1) {
+            for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getSkyLightArray().a(), chunkmap.a, j)) {
+                chunksection1 = (ChunkSection) iterator.next();
+            }
+        }
+
+        if (flag) {
+            a(chunk.getBiomeIndex(), chunkmap.a, j);
+        }
+
+        return chunkmap;
+    }
+
+    private static int a(byte[] abyte, byte[] abyte1, int i) {
+        System.arraycopy(abyte, 0, abyte1, i, abyte.length);
+        return i + abyte.length;
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
new file mode 100644
index 0000000..6f42969
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import java.util.List;
+import java.util.UUID;
+
+public class PacketPlayOutNamedEntitySpawn implements Packet {
+
+    private int a;
+    private UUID b;
+    private int c;
+    private int d;
+    private int e;
+    private byte f;
+    private byte g;
+    private int h;
+    private DataWatcher i;
+    private List j;
+
+    public PacketPlayOutNamedEntitySpawn() {}
+
+    public PacketPlayOutNamedEntitySpawn(EntityHuman entityhuman) {
+        this.a = entityhuman.getId();
+        this.b = entityhuman.getProfile().getId();
+        this.c = MathHelper.floor(entityhuman.locX * 32.0D);
+        this.d = MathHelper.floor(entityhuman.locY * 32.0D);
+        this.e = MathHelper.floor(entityhuman.locZ * 32.0D);
+        this.f = (byte) ((int) (entityhuman.yaw * 256.0F / 360.0F));
+        this.g = (byte) ((int) (entityhuman.pitch * 256.0F / 360.0F));
+        ItemStack itemstack = entityhuman.inventory.getItemInHand();
+
+        this.h = itemstack == null ? 0 : Item.getId(itemstack.getItem());
+        this.i = entityhuman.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.g();
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.e = packetdataserializer.readInt();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readByte();
+        this.h = packetdataserializer.readShort();
+        this.j = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeInt(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeByte(this.g);
+        packetdataserializer.writeShort(this.h);
+        this.i.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
new file mode 100644
index 0000000..6f2aac9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+public class PacketPlayOutOpenWindow implements Packet {
+
+    private int a;
+    private String b;
+    private IChatBaseComponent c;
+    private int d;
+    private int e;
+
+    public PacketPlayOutOpenWindow() {}
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent) {
+        this(i, s, ichatbasecomponent, 0);
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j) {
+        this.a = i;
+        this.b = s;
+        this.c = ichatbasecomponent;
+        this.d = j;
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j, int k) {
+        this(i, s, ichatbasecomponent, j);
+        this.e = k;
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.readUnsignedByte();
+        this.b = packetdataserializer.c(32);
+        this.c = packetdataserializer.d();
+        this.d = packetdataserializer.readUnsignedByte();
+        if (this.b.equals("EntityHorse")) {
+            this.e = packetdataserializer.readInt();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.writeByte(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.a(this.c);
+        packetdataserializer.writeByte(this.d);
+        if (this.b.equals("EntityHorse")) {
+            packetdataserializer.writeInt(this.e);
+        }
+
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
new file mode 100644
index 0000000..d55a67f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -0,0 +1,172 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+import java.util.Iterator;
+import java.util.List;
+
+public class PacketPlayOutPlayerInfo implements Packet {
+
+    private EnumPlayerInfoAction a;
+    private final List b = Lists.newArrayList();
+
+    public PacketPlayOutPlayerInfo() {}
+
+    public PacketPlayOutPlayerInfo(EnumPlayerInfoAction enumplayerinfoaction, EntityPlayer... aentityplayer) {
+        this.a = enumplayerinfoaction;
+        EntityPlayer[] aentityplayer1 = aentityplayer;
+        int i = aentityplayer.length;
+
+        for (int j = 0; j < i; ++j) {
+            EntityPlayer entityplayer = aentityplayer1[j];
+
+            this.b.add(new PlayerInfoData(this, entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public PacketPlayOutPlayerInfo(EnumPlayerInfoAction enumplayerinfoaction, Iterable iterable) {
+        this.a = enumplayerinfoaction;
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+
+            this.b.add(new PlayerInfoData(this, entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = (EnumPlayerInfoAction) packetdataserializer.a(EnumPlayerInfoAction.class);
+        int i = packetdataserializer.e();
+
+        for (int j = 0; j < i; ++j) {
+            GameProfile gameprofile = null;
+            int k = 0;
+            EnumGamemode enumgamemode = null;
+            IChatBaseComponent ichatbasecomponent = null;
+
+            switch (SwitchHelperPlayerInfo.a[this.a.ordinal()]) {
+            case 1:
+                gameprofile = new GameProfile(packetdataserializer.g(), packetdataserializer.c(16));
+                int l = packetdataserializer.e();
+
+                for (int i1 = 0; i1 < l; ++i1) {
+                    String s = packetdataserializer.c(32767);
+                    String s1 = packetdataserializer.c(32767);
+
+                    if (packetdataserializer.readBoolean()) {
+                        gameprofile.getProperties().put(s, new Property(s, s1, packetdataserializer.c(32767)));
+                    } else {
+                        gameprofile.getProperties().put(s, new Property(s, s1));
+                    }
+                }
+
+                enumgamemode = EnumGamemode.getById(packetdataserializer.e());
+                k = packetdataserializer.e();
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.d();
+                }
+                break;
+
+            case 2:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                enumgamemode = EnumGamemode.getById(packetdataserializer.e());
+                break;
+
+            case 3:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                k = packetdataserializer.e();
+                break;
+
+            case 4:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.d();
+                }
+                break;
+
+            case 5:
+                gameprofile = new GameProfile(packetdataserializer.g(), (String) null);
+            }
+
+            this.b.add(new PlayerInfoData(this, gameprofile, k, enumgamemode, ichatbasecomponent));
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.b(this.b.size());
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            PlayerInfoData playerinfodata = (PlayerInfoData) iterator.next();
+
+            switch (SwitchHelperPlayerInfo.a[this.a.ordinal()]) {
+            case 1:
+                packetdataserializer.a(playerinfodata.a().getId());
+                packetdataserializer.a(playerinfodata.a().getName());
+                packetdataserializer.b(playerinfodata.a().getProperties().size());
+                Iterator iterator1 = playerinfodata.a().getProperties().values().iterator();
+
+                while (iterator1.hasNext()) {
+                    Property property = (Property) iterator1.next();
+
+                    packetdataserializer.a(property.getName());
+                    packetdataserializer.a(property.getValue());
+                    if (property.hasSignature()) {
+                        packetdataserializer.writeBoolean(true);
+                        packetdataserializer.a(property.getSignature());
+                    } else {
+                        packetdataserializer.writeBoolean(false);
+                    }
+                }
+
+                packetdataserializer.b(playerinfodata.c().getId());
+                packetdataserializer.b(playerinfodata.b());
+                if (playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(playerinfodata.d());
+                }
+                break;
+
+            case 2:
+                packetdataserializer.a(playerinfodata.a().getId());
+                packetdataserializer.b(playerinfodata.c().getId());
+                break;
+
+            case 3:
+                packetdataserializer.a(playerinfodata.a().getId());
+                packetdataserializer.b(playerinfodata.b());
+                break;
+
+            case 4:
+                packetdataserializer.a(playerinfodata.a().getId());
+                if (playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(playerinfodata.d());
+                }
+                break;
+
+            case 5:
+                packetdataserializer.a(playerinfodata.a().getId());
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
new file mode 100644
index 0000000..985e437
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
@@ -0,0 +1,31 @@
+package net.minecraft.server;
+
+public class PacketPlayOutPlayerListHeaderFooter implements Packet {
+
+    private IChatBaseComponent a;
+    private IChatBaseComponent b;
+
+    public PacketPlayOutPlayerListHeaderFooter() {}
+
+    public PacketPlayOutPlayerListHeaderFooter(IChatBaseComponent ichatbasecomponent) {
+        this.a = ichatbasecomponent;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.d();
+        this.b = packetdataserializer.d();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
new file mode 100644
index 0000000..8376955
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -0,0 +1,115 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.util.Collection;
+import java.util.Iterator;
+
+public class PacketPlayOutScoreboardTeam implements Packet {
+
+    private String a = "";
+    private String b = "";
+    private String c = "";
+    private String d = "";
+    private String e;
+    private int f;
+    private Collection g;
+    private int h;
+    private int i;
+
+    public PacketPlayOutScoreboardTeam() {
+        this.e = EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
+        this.e = EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+        this.a = scoreboardteam.getName();
+        this.h = i;
+        if (i == 0 || i == 2) {
+            this.b = scoreboardteam.getDisplayName();
+            this.c = scoreboardteam.getPrefix();
+            this.d = scoreboardteam.getSuffix();
+            this.i = scoreboardteam.packOptionData();
+            this.e = scoreboardteam.i().e;
+            this.f = scoreboardteam.l().b();
+        }
+
+        if (i == 0) {
+            this.g.addAll(scoreboardteam.getPlayerNameSet());
+        }
+
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, Collection collection, int i) {
+        this.e = EnumNameTagVisibility.ALWAYS.e;
+        this.f = -1;
+        this.g = Lists.newArrayList();
+        if (i != 3 && i != 4) {
+            throw new IllegalArgumentException("Method must be join or leave for player constructor");
+        } else if (collection != null && !collection.isEmpty()) {
+            this.h = i;
+            this.a = scoreboardteam.getName();
+            this.g.addAll(collection);
+        } else {
+            throw new IllegalArgumentException("Players cannot be null/empty");
+        }
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.c(16);
+        this.h = packetdataserializer.readByte();
+        if (this.h == 0 || this.h == 2) {
+            this.b = packetdataserializer.c(32);
+            this.c = packetdataserializer.c(16);
+            this.d = packetdataserializer.c(16);
+            this.i = packetdataserializer.readByte();
+            this.e = packetdataserializer.c(32);
+            this.f = packetdataserializer.readByte();
+        }
+
+        if (this.h == 0 || this.h == 3 || this.h == 4) {
+            int i = packetdataserializer.e();
+
+            for (int j = 0; j < i; ++j) {
+                this.g.add(packetdataserializer.c(40));
+            }
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.h);
+        if (this.h == 0 || this.h == 2) {
+            packetdataserializer.a(this.b);
+            packetdataserializer.a(this.c);
+            packetdataserializer.a(this.d);
+            packetdataserializer.writeByte(this.i);
+            packetdataserializer.a(this.e);
+            packetdataserializer.writeByte(this.f);
+        }
+
+        if (this.h == 0 || this.h == 3 || this.h == 4) {
+            packetdataserializer.b(this.g.size());
+            Iterator iterator = this.g.iterator();
+
+            while (iterator.hasNext()) {
+                String s = (String) iterator.next();
+
+                packetdataserializer.a(s);
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
new file mode 100644
index 0000000..176b3f1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
@@ -0,0 +1,134 @@
+package net.minecraft.server;
+
+public class PacketPlayOutSpawnEntity implements Packet {
+
+    private int a;
+    private int b;
+    private int c;
+    private int d;
+    private int e;
+    private int f;
+    private int g;
+    private int h;
+    private int i;
+    private int j;
+    private int k;
+
+    public PacketPlayOutSpawnEntity() {}
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i) {
+        this(entity, i, 0);
+    }
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j) {
+        this.a = entity.getId();
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        this.h = MathHelper.d(entity.pitch * 256.0F / 360.0F);
+        this.i = MathHelper.d(entity.yaw * 256.0F / 360.0F);
+        this.j = i;
+        this.k = j;
+        if (j > 0) {
+            double d0 = entity.motX;
+            double d1 = entity.motY;
+            double d2 = entity.motZ;
+            double d3 = 3.9D;
+
+            if (d0 < -d3) {
+                d0 = -d3;
+            }
+
+            if (d1 < -d3) {
+                d1 = -d3;
+            }
+
+            if (d2 < -d3) {
+                d2 = -d3;
+            }
+
+            if (d0 > d3) {
+                d0 = d3;
+            }
+
+            if (d1 > d3) {
+                d1 = d3;
+            }
+
+            if (d2 > d3) {
+                d2 = d3;
+            }
+
+            this.e = (int) (d0 * 8000.0D);
+            this.f = (int) (d1 * 8000.0D);
+            this.g = (int) (d2 * 8000.0D);
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.j = packetdataserializer.readByte();
+        this.b = packetdataserializer.readInt();
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.h = packetdataserializer.readByte();
+        this.i = packetdataserializer.readByte();
+        this.k = packetdataserializer.readInt();
+        if (this.k > 0) {
+            this.e = packetdataserializer.readShort();
+            this.f = packetdataserializer.readShort();
+            this.g = packetdataserializer.readShort();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeByte(this.h);
+        packetdataserializer.writeByte(this.i);
+        packetdataserializer.writeInt(this.k);
+        if (this.k > 0) {
+            packetdataserializer.writeShort(this.e);
+            packetdataserializer.writeShort(this.f);
+            packetdataserializer.writeShort(this.g);
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(int i) {
+        this.b = i;
+    }
+
+    public void b(int i) {
+        this.c = i;
+    }
+
+    public void c(int i) {
+        this.d = i;
+    }
+
+    public void d(int i) {
+        this.e = i;
+    }
+
+    public void e(int i) {
+        this.f = i;
+    }
+
+    public void f(int i) {
+        this.g = i;
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
new file mode 100644
index 0000000..c6b8a6d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
@@ -0,0 +1,104 @@
+package net.minecraft.server;
+
+import java.util.List;
+
+public class PacketPlayOutSpawnEntityLiving implements Packet {
+
+    private int a;
+    private int b;
+    private int c;
+    private int d;
+    private int e;
+    private int f;
+    private int g;
+    private int h;
+    private byte i;
+    private byte j;
+    private byte k;
+    private DataWatcher l;
+    private List m;
+
+    public PacketPlayOutSpawnEntityLiving() {}
+
+    public PacketPlayOutSpawnEntityLiving(EntityLiving entityliving) {
+        this.a = entityliving.getId();
+        this.b = (byte) EntityTypes.a(entityliving);
+        this.c = MathHelper.floor(entityliving.locX * 32.0D);
+        this.d = MathHelper.floor(entityliving.locY * 32.0D);
+        this.e = MathHelper.floor(entityliving.locZ * 32.0D);
+        this.i = (byte) ((int) (entityliving.yaw * 256.0F / 360.0F));
+        this.j = (byte) ((int) (entityliving.pitch * 256.0F / 360.0F));
+        this.k = (byte) ((int) (entityliving.aI * 256.0F / 360.0F));
+        double d0 = 3.9D;
+        double d1 = entityliving.motX;
+        double d2 = entityliving.motY;
+        double d3 = entityliving.motZ;
+
+        if (d1 < -d0) {
+            d1 = -d0;
+        }
+
+        if (d2 < -d0) {
+            d2 = -d0;
+        }
+
+        if (d3 < -d0) {
+            d3 = -d0;
+        }
+
+        if (d1 > d0) {
+            d1 = d0;
+        }
+
+        if (d2 > d0) {
+            d2 = d0;
+        }
+
+        if (d3 > d0) {
+            d3 = d0;
+        }
+
+        this.f = (int) (d1 * 8000.0D);
+        this.g = (int) (d2 * 8000.0D);
+        this.h = (int) (d3 * 8000.0D);
+        this.l = entityliving.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readByte() & 255;
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.e = packetdataserializer.readInt();
+        this.i = packetdataserializer.readByte();
+        this.j = packetdataserializer.readByte();
+        this.k = packetdataserializer.readByte();
+        this.f = packetdataserializer.readShort();
+        this.g = packetdataserializer.readShort();
+        this.h = packetdataserializer.readShort();
+        this.m = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeByte(this.b & 255);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeInt(this.e);
+        packetdataserializer.writeByte(this.i);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeByte(this.k);
+        packetdataserializer.writeShort(this.f);
+        packetdataserializer.writeShort(this.g);
+        packetdataserializer.writeShort(this.h);
+        this.l.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketListenerPlayOut) packetlistener);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerInfoData.java b/src/main/java/net/minecraft/server/PlayerInfoData.java
new file mode 100644
index 0000000..fcdbae7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PlayerInfoData.java
@@ -0,0 +1,36 @@
+package net.minecraft.server;
+
+import com.mojang.authlib.GameProfile;
+
+public class PlayerInfoData {
+
+    private final int b;
+    private final EnumGamemode c;
+    private final GameProfile d;
+    private final IChatBaseComponent e;
+    final PacketPlayOutPlayerInfo a;
+
+    public PlayerInfoData(PacketPlayOutPlayerInfo packetplayoutplayerinfo, GameProfile gameprofile, int i, EnumGamemode enumgamemode, IChatBaseComponent ichatbasecomponent) {
+        this.a = packetplayoutplayerinfo;
+        this.d = gameprofile;
+        this.b = i;
+        this.c = enumgamemode;
+        this.e = ichatbasecomponent;
+    }
+
+    public GameProfile a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.b;
+    }
+
+    public EnumGamemode c() {
+        return this.c;
+    }
+
+    public IChatBaseComponent d() {
+        return this.e;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
new file mode 100644
index 0000000..c7d7eec
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -0,0 +1,67 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Maps;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.Map;
+
+public class RegionFileCache {
+
+    private static final Map a = Maps.newHashMap();
+
+    public static synchronized RegionFile a(File file, int i, int j) {
+        File file1 = new File(file, "region");
+        File file2 = new File(file1, "r." + (i >> 5) + "." + (j >> 5) + ".mca");
+        RegionFile regionfile = (RegionFile) RegionFileCache.a.get(file2);
+
+        if (regionfile != null) {
+            return regionfile;
+        } else {
+            if (!file1.exists()) {
+                file1.mkdirs();
+            }
+
+            if (RegionFileCache.a.size() >= 256) {
+                a();
+            }
+
+            RegionFile regionfile1 = new RegionFile(file2);
+
+            RegionFileCache.a.put(file2, regionfile1);
+            return regionfile1;
+        }
+    }
+
+    public static synchronized void a() {
+        Iterator iterator = RegionFileCache.a.values().iterator();
+
+        while (iterator.hasNext()) {
+            RegionFile regionfile = (RegionFile) iterator.next();
+
+            try {
+                if (regionfile != null) {
+                    regionfile.c();
+                }
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+        }
+
+        RegionFileCache.a.clear();
+    }
+
+    public static DataInputStream c(File file, int i, int j) {
+        RegionFile regionfile = a(file, i, j);
+
+        return regionfile.a(i & 31, j & 31);
+    }
+
+    public static DataOutputStream d(File file, int i, int j) {
+        RegionFile regionfile = a(file, i, j);
+
+        return regionfile.b(i & 31, j & 31);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ScoreboardTeam.java b/src/main/java/net/minecraft/server/ScoreboardTeam.java
new file mode 100644
index 0000000..d1de1df
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ScoreboardTeam.java
@@ -0,0 +1,138 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Sets;
+import java.util.Collection;
+import java.util.Set;
+
+public class ScoreboardTeam extends ScoreboardTeamBase {
+
+    private final Scoreboard a;
+    private final String b;
+    private final Set c = Sets.newHashSet();
+    private String d;
+    private String e = "";
+    private String f = "";
+    private boolean g = true;
+    private boolean h = true;
+    private EnumNameTagVisibility i;
+    private EnumNameTagVisibility j;
+    private EnumChatFormat k;
+
+    public ScoreboardTeam(Scoreboard scoreboard, String s) {
+        this.i = EnumNameTagVisibility.ALWAYS;
+        this.j = EnumNameTagVisibility.ALWAYS;
+        this.k = EnumChatFormat.RESET;
+        this.a = scoreboard;
+        this.b = s;
+        this.d = s;
+    }
+
+    public String getName() {
+        return this.b;
+    }
+
+    public String getDisplayName() {
+        return this.d;
+    }
+
+    public void setDisplayName(String s) {
+        if (s == null) {
+            throw new IllegalArgumentException("Name cannot be null");
+        } else {
+            this.d = s;
+            this.a.handleTeamChanged(this);
+        }
+    }
+
+    public Collection getPlayerNameSet() {
+        return this.c;
+    }
+
+    public String getPrefix() {
+        return this.e;
+    }
+
+    public void setPrefix(String s) {
+        if (s == null) {
+            throw new IllegalArgumentException("Prefix cannot be null");
+        } else {
+            this.e = s;
+            this.a.handleTeamChanged(this);
+        }
+    }
+
+    public String getSuffix() {
+        return this.f;
+    }
+
+    public void setSuffix(String s) {
+        this.f = s;
+        this.a.handleTeamChanged(this);
+    }
+
+    public String getFormattedName(String s) {
+        return this.getPrefix() + s + this.getSuffix();
+    }
+
+    public static String getPlayerDisplayName(ScoreboardTeamBase scoreboardteambase, String s) {
+        return scoreboardteambase == null ? s : scoreboardteambase.getFormattedName(s);
+    }
+
+    public boolean allowFriendlyFire() {
+        return this.g;
+    }
+
+    public void setAllowFriendlyFire(boolean flag) {
+        this.g = flag;
+        this.a.handleTeamChanged(this);
+    }
+
+    public boolean canSeeFriendlyInvisibles() {
+        return this.h;
+    }
+
+    public void setCanSeeFriendlyInvisibles(boolean flag) {
+        this.h = flag;
+        this.a.handleTeamChanged(this);
+    }
+
+    public EnumNameTagVisibility i() {
+        return this.i;
+    }
+
+    public EnumNameTagVisibility j() {
+        return this.j;
+    }
+
+    public void a(EnumNameTagVisibility enumnametagvisibility) {
+        this.i = enumnametagvisibility;
+        this.a.handleTeamChanged(this);
+    }
+
+    public void b(EnumNameTagVisibility enumnametagvisibility) {
+        this.j = enumnametagvisibility;
+        this.a.handleTeamChanged(this);
+    }
+
+    public int packOptionData() {
+        int i = 0;
+
+        if (this.allowFriendlyFire()) {
+            i |= 1;
+        }
+
+        if (this.canSeeFriendlyInvisibles()) {
+            i |= 2;
+        }
+
+        return i;
+    }
+
+    public void a(EnumChatFormat enumchatformat) {
+        this.k = enumchatformat;
+    }
+
+    public EnumChatFormat l() {
+        return this.k;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
new file mode 100644
index 0000000..83be7ec
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -0,0 +1,105 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.util.concurrent.GenericFutureListener;
+import java.net.InetAddress;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.Callable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ServerConnection {
+
+    private static final Logger d = LogManager.getLogger();
+    public static final LazyInitVar a = new LazyInitNioEventLoopGroup();
+    public static final LazyInitVar b = new LazyInitLocalEventLoopGroup();
+    private final MinecraftServer e;
+    public volatile boolean c;
+    private final List f = Collections.synchronizedList(Lists.newArrayList());
+    private final List g = Collections.synchronizedList(Lists.newArrayList());
+
+    public ServerConnection(MinecraftServer minecraftserver) {
+        this.e = minecraftserver;
+        this.c = true;
+    }
+
+    public void a(InetAddress inetaddress, int i) {
+        List list = this.f;
+
+        synchronized (this.f) {
+            this.f.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(NioServerSocketChannel.class)).childHandler(new ServerConnectionChannel(this)).group((EventLoopGroup) ServerConnection.a.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+        }
+    }
+
+    public void b() {
+        this.c = false;
+        Iterator iterator = this.f.iterator();
+
+        while (iterator.hasNext()) {
+            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
+
+            try {
+                channelfuture.channel().close().sync();
+            } catch (InterruptedException interruptedexception) {
+                ServerConnection.d.error("Interrupted whilst closing channel");
+            }
+        }
+
+    }
+
+    public void c() {
+        List list = this.g;
+
+        synchronized (this.g) {
+            Iterator iterator = this.g.iterator();
+
+            while (iterator.hasNext()) {
+                NetworkManager networkmanager = (NetworkManager) iterator.next();
+
+                if (!networkmanager.h()) {
+                    if (!networkmanager.g()) {
+                        iterator.remove();
+                        networkmanager.l();
+                    } else {
+                        try {
+                            networkmanager.a();
+                        } catch (Exception exception) {
+                            if (networkmanager.c()) {
+                                CrashReport crashreport = CrashReport.a(exception, "Ticking memory connection");
+                                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Ticking connection");
+
+                                crashreportsystemdetails.a("Connection", (Callable) (new CrashReportNetworkManager(this, networkmanager)));
+                                throw new ReportedException(crashreport);
+                            }
+
+                            ServerConnection.d.warn("Failed to handle packet for " + networkmanager.getSocketAddress(), exception);
+                            ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
+
+                            networkmanager.a(new PacketPlayOutKickDisconnect(chatcomponenttext), new NetworkManagerCloseFuture(this, networkmanager, chatcomponenttext), new GenericFutureListener[0]);
+                            networkmanager.k();
+                        }
+                    }
+                }
+            }
+
+        }
+    }
+
+    public MinecraftServer d() {
+        return this.e;
+    }
+
+    static List a(ServerConnection serverconnection) {
+        return serverconnection.g;
+    }
+
+    static MinecraftServer b(ServerConnection serverconnection) {
+        return serverconnection.e;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WatchableObject.java b/src/main/java/net/minecraft/server/WatchableObject.java
new file mode 100644
index 0000000..678aa91
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WatchableObject.java
@@ -0,0 +1,44 @@
+package net.minecraft.server;
+
+public class WatchableObject {
+
+    private final int a;
+    private final int b;
+    private Object c;
+    private boolean d;
+
+    public WatchableObject(int i, int j, Object object) {
+        this.b = j;
+        this.c = object;
+        this.a = i;
+        this.d = true;
+    }
+
+    public int a() {
+        return this.b;
+    }
+
+    public void a(Object object) {
+        this.c = object;
+    }
+
+    public Object b() {
+        return this.c;
+    }
+
+    public int c() {
+        return this.a;
+    }
+
+    public boolean d() {
+        return this.d;
+    }
+
+    public void a(boolean flag) {
+        this.d = flag;
+    }
+
+    static boolean a(WatchableObject watchableobject, boolean flag) {
+        return watchableobject.d = flag;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
new file mode 100644
index 0000000..c488f07
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WhiteList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class WhiteList extends JsonList {
+
+    public WhiteList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry a(JsonObject jsonobject) {
+        return new WhiteListEntry(jsonobject);
+    }
+
+    public boolean isWhitelisted(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        WhiteListEntry whitelistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) whitelistentry.getKey()).getName()) {
+            whitelistentry = (WhiteListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        WhiteListEntry whitelistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            whitelistentry = (WhiteListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) whitelistentry.getKey()).getName()));
+
+        return (GameProfile) whitelistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
-- 
1.9.0

